'concat2' [ concat concat ] define
'concat3' [ concat2 concat ] define
'concat4' [ concat2 concat2 ] define

; example: 1 2 dup2 ;=> [1 2 1 2]
'dup2' [
  swap dup swapp swap dup swapp
] define

'string2' [
  swap string swap
  swapp swap string swap swapp
] define

'test' [
  swap print call drop "" print
] define

'must-equal' [
  ; Evaluate condition
  dup2 eq?

  ; Turn args into strings
  string2

  ; Display messages
  [ '  F: ' swap swapp ' must be equal to ' swap concat3 print ]
  [ pop pop '  PASS' print ]
  if-else
] define

'must-be-less' [
  dup2 lt?
  string2

  [ swap '  F: ' swap swapp ' must be less than ' swap concat3 print ]
  [ pop pop '  PASS' print ]
  if-else
] define

'must-be-greater' [
  dup2 gt?
  string2

  [ swap '  F: ' swap swapp ' must be greater than ' swap concat3 print ]
  [ pop pop '  PASS' print ]
  if-else
] define

'must-be-integer' [
  dup integer?

  [ '  F: ' swap ' must be an integer ' concat2 print ]
  [ pop '  PASS' print ]
  if-else
] define

'must-be-empty' [
  empty?

  [ '  F: must be empty' print ]
  [ '  PASS' print ]
  if-else
] define
